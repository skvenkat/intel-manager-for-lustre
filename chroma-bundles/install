#!/usr/bin/env python

import glob
import logging
import tempfile
import shutil
import subprocess
import os
import tarfile
import sys
import rpm
import json
import errno
import select
import base64
from urlparse import urlparse, urlunparse
import yum
import ssl
import urllib2
import time
import xmlrpclib
import httplib
import platform
import itertools
import traceback
import socket
# without GNU readline, raw_input prompt goes to stderr
import readline
assert readline
import argparse

PRODUCT_NAME = "Intel(R) Manager for Lustre* software"
ARCHIVE_SUFFIX = ".tar.gz"

# Although we will install everything, use this package as the 'it' when asking
# what version of 'it' is installed.
MAIN_PACKAGE = "chroma-manager"

BUNDLE_ROOT = "/var/lib/chroma/repo"
BUNDLE_BACKUP = "/var/lib/chroma/repo.previous"
REPO_ALIASES = [ "{0}Server" ]
LOG_DIR = "/var/log/chroma"
LOG_FILE = os.path.join(LOG_DIR, "install.log")

def _check_platform():
    # This is the place to run tests for validating that this is a sane
    # installation target.

    log.debug("Platform check ... ")

    # TODO: Memory/CPU/Disk checks?

    # Handle hostname == localhost shenanigans
    hostname = socket.gethostname()
    try:
        address = socket.gethostbyname(hostname)
    except socket.gaierror:
        log.error(
            "'%s' is not a resolvable hostname. Please set the system hostname to a resolvable name and re-run the installer." % hostname)
        sys.exit(-1)
    else:
        if address.startswith('127'):
            log.error("'%s' resolves to a loopback address. Please set the system hostname to a non-loopback address and re-run the installer." % hostname)
            sys.exit(-1)

    log.debug("Successfully resolved %s to %s" % (hostname, address))

    # Seems unlikely that someone will be trying to install this on their
    # old SPARC 5, but who knows?
    SUPPORTED_ARCHES = ['64bit_ELF']
    # Might work for SL too, but hasn't been tested.
    SUPPORTED_DISTROS = ['redhat', 'centos']
    # Keep the version locked down for now -- if we can go with a minimum
    # version that'd be better, but we can't assume (c.f. pacemaker).
    SUPPORTED_VERSIONS = ['7.1', '7.1.1503', '7.2', '7.2.1511', '7.3', '7.3.1611', '7.4', '7.4.1708', '7.5']
    # This will work assuming we have version parity across all supported
    # distributions.
    SUPPORTED_PLATFORMS = ["%s-%s-%s" % p for p in itertools.product(SUPPORTED_DISTROS, SUPPORTED_VERSIONS, SUPPORTED_ARCHES)]

    detected_platform = "%s-%s-%s_%s" % (platform.dist()[0:2]
                                         + platform.architecture())
    if detected_platform not in SUPPORTED_PLATFORMS:
        log.error("%s is not a supported platform for %s. Please refer to the installation guide for a list of supported platforms." % (detected_platform, PRODUCT_NAME))
        sys.exit(-1)

    log.debug("Platform check ... Supported")


def _mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError, e:
        try:
            if e.errno != errno.EEXIST:
                log.debug("Unhandled exception: %s" % traceback.format_exc())
                raise e
            elif e.errno == errno.EEXIST and not os.path.isdir(path):
                log.error("%s exists but is not a directory" % path)
                sys.exit(-1)
        except NameError:
            # logger not initialized yet?
            print "Unhandled error while creating %s: %s" % (path, e)
            sys.exit(-1)


def spinner(p):
    chars = '/-\|'
    n = 0
    prev_time = time.time()
    line = p.stdout.readline()
    while line:
        char = chars[n % 4]
        this_time = time.time()
        log.debug("%f: %s" % (this_time - prev_time, line.rstrip()))
        sys.stdout.write(char)
        sys.stdout.flush()
        sys.stdout.write('\r')
        line = p.stdout.readline()
        n+=1
        prev_time = this_time
    rc = p.wait()
    print
    return rc


def _run(args, passthrough=False, drain_stdin=False):
    """
    :param passthrough: If true, pass stdin+stdout through to the user rather
    than capturing them.
    """

    log.debug("Running %s" % args)
    if drain_stdin:
        while len(select.select([sys.stdin.fileno()], [], [], 0.0)[0])>0:
            os.read(sys.stdin.fileno(), 4096)

    # As a general rule, any error condition which is likely to result in an
    # exception MUST be wrapped in an exception handler so that we never
    # present a traceback to the end user.
    try:
        if passthrough:
            # when pipes are not used to connect subprocess, exceptions will not be caught within this routine,
            # to avoid tracebacks being printed on the commandline, redirect stderr to logfile.
            # raw_input requires GNU readlines to print prompt to stdout (rather than stderr)
            with open(LOG_FILE, 'a') as f:
                p = subprocess.Popen(args, stderr=f)
        else:
            p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except OSError, e:
        log.debug("OSError: %s" % traceback.format_exc())
        if e.errno is errno.ENOENT:
            log.error("Unable to execute the subcommand '%s' because it doesn't exist. (Installation failure?)" % args[0])

        log.error("Please check %s for more details about the problem and retry the installation after resolving the issue or contacting support." % LOG_FILE)
        sys.exit(-1)
    except Exception:
        log.debug("Unhandled exception in _run: %s" % traceback.format_exc())
        log.error("Unhandled exception. Please contact support with details from %s." % LOG_FILE)
        sys.exit(-1)

    stdout, stderr = p.communicate()
    rc = p.returncode
    log.debug("rc=%s" % rc)
    log.debug("stdout=%s" % stdout)
    log.debug("stderr=%s" % stderr)
    if rc != 0:
        log.error("An error occurred running `{command}`, see {LOG_FILE} for details".format(
            command=args[0],
            LOG_FILE=LOG_FILE
        ))
        sys.exit(-1)

    return rc, stdout, stderr


def _check_root():
    if os.geteuid() != 0:
        log.error("This script must be run as root")
        sys.exit(-1)


def _setup_logging():
    _mkdir_p(LOG_DIR)

    log = logging.getLogger('install')
    log.setLevel(logging.DEBUG)

    screen_output = logging.StreamHandler()
    screen_output.setLevel(logging.INFO)
    screen_output.setFormatter(logging.Formatter('\033[1m%(message)s\033[0m'))
    log.addHandler(screen_output)
    file_output = logging.FileHandler(LOG_FILE)
    file_output.setLevel(logging.DEBUG)
    file_output.setFormatter(logging.Formatter('[%(asctime)s] %(levelname)s %(message)s', '%d/%b/%Y:%H:%M:%S'))
    log.addHandler(file_output)

    log.debug("Created logfile: %s" % LOG_FILE)
    return log


def _unpack_repo(tarball_path, destination):
    log.debug("Preparing to extract %s to %s" % (tarball_path, destination))
    _mkdir_p(destination)

    try:
        archive = tarfile.open(tarball_path, "r:gz")
    except tarfile.TarError, e:
        log.debug("exception in tarfile.open(): %s" % traceback.format_exc())
        log.error("Error opening %s: %s" % tarball_path, e.message)
        sys.exit(-1)
    else:
        log.debug("Opened installer tarfile")

    try:
        archive.extractall(destination)
    except tarfile.TarError, e:
        log.debug("exception in archive.extractall(): %s" % traceback.format_exc())
        log.error("Error extracting %s to %s: %s" % tarball_path, destination, e.message)
        sys.exit(-1)
    else:
        log.debug("Completed extracting")



def _print_version(version = None, release = None):
    if not version:
        version, release = _get_version()

    if version:
        log.info("{MAIN_PACKAGE} {version}-{release} is currently installed".format(
                 MAIN_PACKAGE=MAIN_PACKAGE,
                 version=version,
                 release=release
        ))

def _get_version():
    ts = rpm.TransactionSet()
    headers = ts.dbMatch('name', MAIN_PACKAGE)
    if not headers:
        version = release = None
    else:
        header = list(headers)[0]
        version=header['version']
        release=header['release']

    return version, release

def _new_bundles(upgrade):
    bundles = {}
    log.debug("Bundles in {action} package:".format(action = "upgrade" \
                                                        if upgrade \
                                                        else "installation"))
    bundle_files = glob.glob("*/*-bundle%s" % ARCHIVE_SUFFIX)
    for bundle_file in bundle_files:
        archive = tarfile.open(bundle_file, "r:gz")
        try:
            meta_file = archive.extractfile('./meta')
        except KeyError:
            log.error("Malformed bundle file %s:" % bundle_file)
            log.error(archive.list())
            sys.exit(-1)
        meta = json.load(meta_file)
        log.debug("{name}-{version}: {description}".format(
            name=meta['name'],
            version=meta['version'],
            description=meta['description']
        ))

        meta['filename'] = bundle_file
        meta['distro_version'] = meta['distro'][2:]

        bundles[meta['name'] + "-" + meta['distro']] = meta

    # mock up a fake "external" bundle
    meta = {
        "name": "external",
        "distro": "el7",
        "version": "0.0.0",
        "description": "fake bundle as a placeholder for externally available packages",
        "filename": "",
        "distro_version": "7"
    }
    bundles[meta['name'] + "-" + meta['distro']] = meta

    return bundles


def _new_profiles(upgrade):
    profiles = []
    log.debug("Profiles in {action} package:".format(action = "upgrade" \
                                                         if upgrade \
                                                         else "installation"))
    profile_files = glob.glob("*.profile")
    for profile_file in profile_files:
        profile = json.load(open(profile_file))
        log.debug("{name}: {description}".format(
            name=profile['ui_name'],
            description=profile['ui_description']
        ))
        profiles.append(profile_file)

    return profiles


def _old_bundles():
    bundles = {}
    log.debug("Bundles currently installed:")
    for bundle_meta_path in glob.glob(os.path.join(BUNDLE_ROOT, "*/*/meta")):
        meta = json.load(open(bundle_meta_path))

        log.debug("{name}-{version}: {description}".format(
            name=meta['name'],
            version=meta['version'],
            description=meta['description']
        ))
        bundle_name = meta['name'] + "-" + meta.get('distro', 'el6')

        # Bundles prior to 3.0 did not have a distro. Give it an empty distro
        # as a default value.
        meta['distro'] = meta.get('distro', '')

        meta['distro_version'] = meta['distro'][2:]

        bundles[bundle_name] = meta

    return bundles
    
def _create_support_repos():

    repodir = "/etc/yum.repos.d"
    repofile = "chroma_support.repo"
    target_path = os.path.join(repodir, repofile)
    if not os.path.exists(target_path):
        try:
            shutil.copy(repofile, repodir)
        except:
            log.debug("Failed to create %s." % target_path)
            log.info("Failed to create %s." % target_path)
            sys.exit(-1)

def _create_manager_repo():
    manager_repo_dir = tempfile.mkdtemp()
    log.debug("Temporary yum repo at %s" % manager_repo_dir)
    manager_tarball = glob.glob("el" + platform.dist()[1][0:1] + '/*-manager-*%s' % ARCHIVE_SUFFIX)[0]
    log.info("Unpacking installation package %s" % manager_tarball)
    _unpack_repo(manager_tarball, manager_repo_dir)

    manager_repo_file = tempfile.NamedTemporaryFile(dir="/etc/yum.repos.d/", suffix=".repo", delete=False)
    log.debug("Temporary yum config at %s" % manager_repo_file.name)
    repo_text = """
# Temporary file
# Created by Intel(R) Manager for Lustre* software upgrade script
[chroma-manager]
name=chroma-manager
baseurl=file://{manager_repo_dir}
gpgcheck=0
enable=0
    """.format(manager_repo_dir=manager_repo_dir)
    manager_repo_file.write(repo_text)
    manager_repo_file.flush()

    return manager_repo_dir, manager_repo_file


def _install_or_upgrade_packages(upgrade):
    manager_repo_dir = None
    manager_repo_file = None
    old_version, old_release = _get_version()

    try:
        manager_repo_dir, manager_repo_file = _create_manager_repo()
        log.info("{action} Intel(R) Manager for Lustre*".format(action="Upgrading" \
                                                                if upgrade \
                                                                else "Installing"))
        p = subprocess.Popen(["yum", "-y", "--enablerepo=chroma-manager",
                              "upgrade" if upgrade else "install",
                              MAIN_PACKAGE], stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT, bufsize=0)
        if spinner(p) != 0:
            log.error("The package installation failed. Please contact support with details from %s." % LOG_FILE)
            sys.exit(-1)
    finally:
        if manager_repo_dir:
            shutil.rmtree(manager_repo_dir)
        if manager_repo_file:
            os.remove(manager_repo_file.name)

    new_version, new_release = _get_version()
    log.debug("Old VR: %s.%s -> New VR: %s.%s" % (old_version, old_release,
                                                  new_version, new_release))
    # Try to detect when an install or upgrade failed. It would be better to
    # be told directly by yum (HYD-2109), but at the very least we should
    # not be blindly moving forward after a failed install.
    if all([old_version, old_release, new_version, new_release]):
        # Would prefer to fail here, but the installer should be idempotent.
        # Best we can do without better yum diagnostics is to splash up a
        # big warning and hope someone's paying attention.
        if (old_version, old_release) == (new_version, new_release):
            log.warning("\n\nWARNING: The installed version (%s.%s) did not change.\n"
                        "This is OK if the installer was intentionally re-run with the same version.\n"
                        "Otherwise, please contact support with details from %s.\n\n" % (old_version, old_release, LOG_FILE))
    elif not any([old_version, old_release, new_version, new_release]):
        # This really didn't work out, did it?
        log.error("The installation failed. Please contact support with details from %s." % LOG_FILE)
        sys.exit(-1)
    elif all([old_version, old_release]) and not all([new_version, new_release]):
        # Hard to see how this would happen, because we're doing an upgrade
        # rather than an erase/install. But we should handle it.
        log.error("The upgrade from %s.%s to a new version failed. Please contact support with details from %s." % (old_version, old_release, LOG_FILE))
        sys.exit(-1)


def _backup_repo(old_bundles, bundle, meta):
    # If iml-agent then we MAY need a compatability link.
    need_compat = (meta['name'] == 'iml-agent')

    # We don't know yet whether repos are $repoverion'd or not, so
    # assume not until we discover it out later
    old_install_location = os.path.join(BUNDLE_ROOT, meta['name'])
    backup_location = os.path.join(BUNDLE_BACKUP,
                                   old_bundles[bundle]['name'])

    # Ensure the backup location exists
    _mkdir_p(BUNDLE_BACKUP)

    # If our repo is already $releasever'd
    if meta['distro_version'] and os.path.isdir(os.path.join(old_install_location, meta['distro_version'])):
        # Add the $releasever to the backup source
        old_install_location = os.path.join(old_install_location, meta['distro_version'])
        # And backup destination
        backup_location = os.path.join(backup_location, meta['distro_version'])
        _mkdir_p(os.path.join(BUNDLE_BACKUP, meta['distro_version']))
        need_compat = False

    log.debug("Backing up %s to %s" % (old_install_location,
                                       backup_location))

    # Remove any old backups
    if os.path.exists(backup_location):
        log.debug("Removing old backup %s" % backup_location)
        shutil.rmtree(backup_location)

    # Move the installed bundle (repo) to backup location
    shutil.move(old_install_location, backup_location)

    # Clean up any previous "compatibilty" repo
    # We assume that if a compatible repo exists it this point
    # (i.e. pre-upgrade) then agents have been upgraded to $releasever'd
    # repos
    if os.path.exists(os.path.join(BUNDLE_ROOT, meta['name'])):
        for path in os.listdir(os.path.join(BUNDLE_ROOT, meta['name'])):
            path = os.path.join(BUNDLE_ROOT, meta['name'], path)
            if os.path.isdir(path):
                shutil.rmtree(path)
            else:
                os.remove(path)

    return need_compat


def _install_or_upgrade_bundles(old_bundles, new_bundles):
    all_bundles = old_bundles.copy()
    all_bundles.update(new_bundles)

    for bundle, meta in all_bundles.items():
        install_location = os.path.join(BUNDLE_ROOT, meta['name'], meta['distro_version'])
        need_compat = False
        if bundle in old_bundles:
            need_compat = _backup_repo(old_bundles, bundle, meta)

        if bundle in new_bundles:
            _mkdir_p(install_location)
            if meta['filename'] == "":
                # write fake bundle metadata to the metadata file
                with open(os.path.join(install_location, "meta",),
                          'w') as outfile:
                    json.dump(meta, outfile)
            else:
                # Extract the new bundle
                _unpack_repo(meta['filename'], install_location)
                # While CentOS uses just the numerical version, RHEL appends the
                # installation type, so allow aliases and create a symlink pointing the
                # alias at our repo
                for alias in REPO_ALIASES:
                    link_path = os.path.join(BUNDLE_ROOT, meta['name'], alias.format(meta['distro_version']))
                    try:
                        os.symlink(meta['distro_version'], link_path)
                    except OSError as e:
                        if e.errno == errno.EEXIST:
                            if os.path.islink(link_path):
                                pass
                            else:
                                raise SystemExit("%s exists but is not a symlink as is expected" % link_path)
                        else:
                            raise
                if need_compat:
                    # We need to be repo compatible with older releases that won't
                    # know to find RPMs in a $releasever subdir
                    compat_location = os.path.join(BUNDLE_ROOT, meta['name'])
                    log.debug("Creating backwards compatible repo in %s" % compat_location)
                    # Sadly there is no python function to link the contents of a tree
                    # to a new location -- we could write one.  But is it worth it for
                    # this one case?
                    _run(['cp', '-rl', install_location + "/.", compat_location])
            _run(['chroma-config', 'bundle', 'register', install_location])
        else:
            # Remove any old bundles we don't have anymore
            # repo will already have been moved to backup location
            log.debug("Removing retired bundle %s" % meta['name'])
            _run(['chroma-config', 'bundle', 'delete', install_location])
            # agents will still have the repo we just deleted configured
            # and be getting errors trying to find the metadata
            # create an empty repo for this retired bundle
            try:
                os.makedirs(install_location)
            except OSError as e:
                if e.errno != errno.EEXIST:
                    raise SystemExit("Failed to create %s" % install_location)
            _run(['createrepo', install_location])


def _install_or_upgrade_profiles(new_profiles):
    log.info("Registering profiles")

    for profile in new_profiles:
        _run(['chroma-config', 'profile', 'register', profile])


def _check_repos():

    class ProxiedTransport(xmlrpclib.Transport):
        def set_proxy(self, proxy):
            self.proxy = proxy

        def make_connection(self, host):
            self.realhost = host
            h = httplib.HTTP(self.proxy)
            return h

        def send_request(self, connection, handler, request_body):
            connection.putrequest("POST", 'http://%s%s' % (self.realhost, handler))

        def send_host(self, connection, host):
            connection.putheader('Host', self.realhost)

    log.info("Testing YUM")

    yb = yum.YumBase()
    yb.setCacheDir()

    failed_urls = []
    transport_proxy = None
    for repo in yb.repos.listEnabled():
        # set up a proxy handler if necessary
        if repo.proxy_dict:
            urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler(repo.proxy_dict)))
            transport_proxy = ProxiedTransport()
            transport_proxy.set_proxy(repo.proxy_dict['https'][8:])

        urls = []
        if repo.mirrorlist:
            urls = [repo.mirrorlist]
        else: # baseurl[s]
            for url in repo.baseurl:
                if url.find("/XMLRPC/") > -1:
                    urls.append(url)
                else: # regular yum repo
                    urls.append(url + "/" + "repodata/repomd.xml")

        failures = 0
        for url in urls:
            url_str = url
            xmlrpc = url.find("/XMLRPC/")
            if xmlrpc != -1:
                url = url[0:xmlrpc] + "/rpc/api"
                try:
                    server = xmlrpclib.ServerProxy(url, transport = transport_proxy)
                    server.api.systemVersion()
                except:
                    failures += 1
                    failed_urls.append(url)
            else:
                parse_result = urlparse(url)

                # if the url has a user-information component split it out and auth with it.
                # ex: https://username:password@example.com'
                if parse_result.username:
                    l = list(parse_result)
                    # replace netloc with a version of the url that doesn't include the user:pass
                    l[1] = "%s:%s" % (parse_result.hostname, parse_result.port) if parse_result.port else parse_result.hostname

                    url = urllib2.Request(urlunparse(tuple(l)))
                    base64string = base64.encodestring(
                        '%s:%s' % (parse_result.username, parse_result.password)
                    ).replace('\n', '')
                    url.add_header("Authorization", "Basic %s" % base64string)

                if repo.sslcacert:
                    cafile = repo.sslcacert
                else:
                    cafile = None
                context = ssl.create_default_context(cafile=cafile)

                if repo.sslclientkey and repo.sslclientcert:
                    context.load_cert_chain(repo.sslclientcert,
                                            repo.sslclientkey)
                    urllib2.install_opener(
                        urllib2.build_opener(
                            urllib2.HTTPSHandler(context=context)))

                try:
                    urllib2.urlopen(url, timeout=5)
                except urllib2.URLError:
                    failures += 1
                    failed_urls.append(url_str)
                else:
                    continue

        if failures == len(urls):
            log.debug("Failed to read information for repository %s." % repo.id)
            log.info('Yum did not find the required network resources for all enabled repositories.\n'
                     'Please check your network and yum configuration and try again.\n'
                     'Perhaps you need to disable some repositories that are expectedly not reachable.\n'
                     'You may also see this message if Red Hat Satellite repos are enabled.\n'
                     'To skip this check, please rerun with the --no-repo-check flag.')
            log.info("URLs that failed: %s" % ' '.join(urls))
            sys.exit(-1)


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--no-repo-check', '-r', action='store_false', default=True,
                        dest='repo_check',  required=False)
    parser.add_argument('--no-platform-check', '-p', action='store_false', default=True,
                        dest='platform_check', required=False)
    parser.add_argument('--no-dbspace-check', '-d', action='store_true', default=False,
                        dest='dbspace_check', required=False)
    args = parser.parse_args()

    if args.platform_check:
        _check_platform()

    _create_support_repos()

    if args.repo_check:
        _check_repos()

    version, release = _get_version()

    if version:
        upgrade = True
    else:
        upgrade = False

    log.info("Starting {PRODUCT_NAME} {action}".format(PRODUCT_NAME=PRODUCT_NAME,
                                                   action = "upgrade" \
                                                       if upgrade \
                                                       else "installation"))

    if upgrade:
        # Tell the user what the old version is
        _print_version(version=version, release=release)

        # Enumerate the old bundles (and soon, profiles)
        old_bundles = _old_bundles()

        _run(['chroma-config', 'stop'])
    else:
        old_bundles = {}

    # Find the new bundles and profiles
    new_bundles = _new_bundles(upgrade)
    new_profiles = _new_profiles(upgrade)

    # Update RPMs
    _install_or_upgrade_packages(upgrade)

    # Ensure database migrations are run (may prompt the user)
    _run(['chroma-config', 'setup'] + (['--no-dbspace-check'] if args.dbspace_check else []),
         passthrough=True,
         drain_stdin=True)

    # Install/update bundles
    _install_or_upgrade_bundles(old_bundles, new_bundles)

    # register (new) profiles
    _install_or_upgrade_profiles(new_profiles)

    # Tell the user what the (new) version is
    _print_version()

    log.info("\n{PRODUCT_NAME} {action} completed successfully\n".format(PRODUCT_NAME=PRODUCT_NAME,
                                                                         action="upgrade"
                                                                             if upgrade
                                                                             else "installation"))
log = _setup_logging()
try:
    main()
except SystemExit as e:
    # Code in main that calls sys.exit()
    # is assumed to be handled, so skipping
    # any more output, but raise to return the returncode
    log.debug("SystemExit: %s" % e)
    raise
except:
    log.debug("Unhandled exception: %s" % traceback.format_exc())
    log.error("Unhandled exception. Please contact support with details from %s." % LOG_FILE)
    sys.exit(-1)
